# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: CI Scan & Classify

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
  schedule:
    - cron: "17 3 * * 1"

jobs:
  scan-and-classify:
    runs-on: ubuntu-latest

    # GITHUB_TOKEN permissions required for Dependabot alerts
    permissions:
      contents: read
      packages: read
      security-events: read   # <-- important

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Set up Node (for Snyk)
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install Snyk CLI
        run: npm install -g snyk

      - name: Run Snyk (never fail the build)
        run: |
          snyk test --json --fail-on=never --org=d3c030f3-4a1d-8f6c-cc98085e7e76 > snyk_results.json 2>&1 || echo "{}" > snyk_results.json
        env:
          SNYK_TOKEN: ${{ secrets.NEW_SNYK_TOKEN }}

      # ----------------------------
      # Dependabot alerts via GITHUB_TOKEN
      # ----------------------------
      - name: Install GitHub CLI
        uses: cli/cli-action@v2

      - name: Fetch Dependabot alerts (with pagination)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # provided automatically
        run: |
          set -e
          # Fetch alerts (may output multiple JSON docs when paginating)
          if gh api --paginate \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "/repos/${{ github.repository }}/dependabot/alerts" > dependabot_alerts_raw.json; then
            # Ensure a proper JSON array
            if jq -e . dependabot_alerts_raw.json >/dev/null 2>&1; then
              if jq -e 'type=="array"' dependabot_alerts_raw.json >/dev/null; then
                cp dependabot_alerts_raw.json dependabot_alerts.json
              else
                jq -s '.' dependabot_alerts_raw.json > dependabot_alerts.json
              fi
            else
              echo "[]" > dependabot_alerts.json
            fi
          else
            echo "Could not fetch Dependabot alerts (likely permissions or none exist). Using empty list."
            echo "[]" > dependabot_alerts.json
          fi

      - name: Show inputs (first few lines)
        run: |
          echo "---- snyk_results.json (head) ----"
          head -n 40 snyk_results.json || true
          echo "---- dependabot_alerts.json (head) ----"
          head -n 40 dependabot_alerts.json || true

      - name: Run classifier CLI
        run: |
          python Model_Development/cli_tool.py \
            --snyk-json snyk_results.json \
            --dependabot-json dependabot_alerts.json \
            --model Model_Development/vulnerability_classifier_model_enhanced.joblib \
            --out dashboard/cli_results.json

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: scan-and-classify-artifacts
          path: |
            snyk_results.json
            dependabot_alerts.json
            dashboard/cli_results.jsonname: CI Scan & Classify

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
  schedule:
    - cron: "17 3 * * 1"

jobs:
  scan-and-classify:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      security-events: read   # required for /dependabot/alerts

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Set up Node (for Snyk)
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install Snyk CLI
        run: npm install -g snyk

      - name: Run Snyk (never fail the build)
        run: |
          snyk test --json --fail-on=never --org=d3c030f3-4a1d-8f6c-cc98085e7e76 > snyk_results.json 2>&1 || echo "{}" > snyk_results.json
        env:
          SNYK_TOKEN: ${{ secrets.NEW_SNYK_TOKEN }}

      # ---------- Dependabot alerts with diagnostics ----------
      - name: Fetch Dependabot alerts (REST, with diagnostics)
        env:
          TOKEN: ${{ github.token }}
          REPO: ${{ github.repository }}
        run: |
          set -e
          BASE="https://api.github.com/repos/${REPO}/dependabot/alerts?per_page=100"
          echo "Fetching Dependabot alerts from: ${BASE}"

          # Try first page with headers to capture status
          HTTP_CODE=$(curl -sS -w "%{http_code}" -o dpa_page1.json \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            -H "Authorization: Bearer ${TOKEN}" \
            "${BASE}")

          echo "HTTP code: ${HTTP_CODE}"

          if [ "${HTTP_CODE}" = "401" ] || [ "${HTTP_CODE}" = "403" ]; then
            echo "::warning::Dependabot API returned ${HTTP_CODE}. This usually means:"
            echo " - Dependabot alerts are not enabled on the repo, OR"
            echo " - Org/repo policy does not allow GITHUB_TOKEN to read security events."
            echo "Proceeding with empty alerts to keep the pipeline running."
            echo "[]" > dependabot_alerts.json
          elif [ "${HTTP_CODE}" != "200" ]; then
            echo "::warning::Unexpected HTTP code ${HTTP_CODE}. Proceeding with empty alerts."
            echo "[]" > dependabot_alerts.json
          else
            # Page 1 ok. If itâ€™s an array, keep it. Else make it an array.
            if jq -e 'type=="array"' dpa_page1.json >/dev/null 2>&1; then
              jq -c '.' dpa_page1.json > dependabot_alerts.json
            else
              jq -sc '.' dpa_page1.json > dependabot_alerts.json
            fi

            # NOTE: If you expect >100 alerts, add pagination here.
          fi

          echo "First items (if any):"
          head -n 40 dependabot_alerts.json || true

      - name: Show inputs (first few lines)
        run: |
          echo "---- snyk_results.json (head) ----"
          head -n 40 snyk_results.json || true
          echo "---- dependabot_alerts.json (head) ----"
          head -n 40 dependabot_alerts.json || true

      - name: Run classifier CLI
        run: |
          python Model_Development/cli_tool.py \
            --snyk-json snyk_results.json \
            --dependabot-json dependabot_alerts.json \
            --model Model_Development/vulnerability_classifier_model_enhanced.joblib \
            --out dashboard/cli_results.json

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: scan-and-classify-artifacts
          path: |
            snyk_results.json
            dependabot_alerts.json
            dashboard/cli_results.json






